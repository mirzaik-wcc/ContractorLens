# ContractorLens Infrastructure Deployment
name: Infrastructure Deployment

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-deployment.yml'
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-west-2
  TERRAFORM_VERSION: 1.5.0

jobs:
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v4
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd infrastructure/terraform
          terraform validate

      - name: TFLint
        uses: terraform-linters/setup-tflint@v5
        with:
          tflint_version: latest

      - name: Run TFLint
        run: |
          cd infrastructure/terraform
          tflint --init
          tflint

  terraform-plan-staging:
    name: Terraform Plan (Staging)
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v4
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Create staging terraform.tfvars
        run: |
          cd infrastructure/terraform
          cat > terraform.tfvars << EOF
          aws_region = "us-west-2"
          environment = "staging"
          project_name = "contractorlens-staging"
          
          # Database
          db_password = "${{ secrets.DB_PASSWORD_STAGING }}"
          
          # Container registry
          ecr_repository_url = "${{ secrets.ECR_REPOSITORY_URL_STAGING }}"
          
          # Firebase
          firebase_project_id = "${{ secrets.FIREBASE_PROJECT_ID }}"
          firebase_private_key = "${{ secrets.FIREBASE_PRIVATE_KEY }}"
          firebase_client_email = "${{ secrets.FIREBASE_CLIENT_EMAIL }}"
          
          # Gemini
          gemini_api_key = "${{ secrets.GEMINI_API_KEY }}"
          
          # Staging specific settings
          ecs_desired_count = 1
          ecs_min_capacity = 1
          ecs_max_capacity = 3
          db_instance_class = "db.t3.small"
          enable_deletion_protection = false
          EOF

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -out=staging.tfplan

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: staging-tfplan
          path: infrastructure/terraform/staging.tfplan

  terraform-apply-staging:
    name: Terraform Apply (Staging)
    runs-on: ubuntu-latest
    needs: terraform-plan-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' && github.event.inputs.action == 'apply'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v4
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: staging-tfplan
          path: infrastructure/terraform/

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve staging.tfplan

      - name: Output infrastructure details
        run: |
          cd infrastructure/terraform
          terraform output

  terraform-plan-production:
    name: Terraform Plan (Production)
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v4
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Create production terraform.tfvars
        run: |
          cd infrastructure/terraform
          cat > terraform.tfvars << EOF
          aws_region = "us-west-2"
          environment = "production"
          project_name = "contractorlens"
          
          # Database
          db_password = "${{ secrets.DB_PASSWORD_PRODUCTION }}"
          
          # Container registry
          ecr_repository_url = "${{ secrets.ECR_REPOSITORY_URL_PRODUCTION }}"
          
          # Firebase
          firebase_project_id = "${{ secrets.FIREBASE_PROJECT_ID }}"
          firebase_private_key = "${{ secrets.FIREBASE_PRIVATE_KEY }}"
          firebase_client_email = "${{ secrets.FIREBASE_CLIENT_EMAIL }}"
          
          # Gemini
          gemini_api_key = "${{ secrets.GEMINI_API_KEY }}"
          
          # Domain and SSL
          domain_name = "contractorlens.com"
          certificate_arn = "${{ secrets.SSL_CERTIFICATE_ARN }}"
          
          # Production settings
          ecs_desired_count = 2
          ecs_min_capacity = 2
          ecs_max_capacity = 10
          db_instance_class = "db.t3.medium"
          enable_deletion_protection = true
          EOF

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=production/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -out=production.tfplan

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-tfplan
          path: infrastructure/terraform/production.tfplan

  terraform-apply-production:
    name: Terraform Apply (Production)
    runs-on: ubuntu-latest
    needs: terraform-plan-production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production' && github.event.inputs.action == 'apply'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v4
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: production-tfplan
          path: infrastructure/terraform/

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=production/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve production.tfplan

      - name: Output infrastructure details
        id: terraform-output
        run: |
          cd infrastructure/terraform
          echo "load_balancer_dns=$(terraform output -raw load_balancer_dns_name)" >> $GITHUB_OUTPUT
          echo "application_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT

      - name: Update DNS records (if using Route53)
        if: steps.terraform-output.outputs.load_balancer_dns != ''
        run: |
          # Update Route53 records to point to new load balancer
          echo "Load balancer DNS: ${{ steps.terraform-output.outputs.load_balancer_dns }}"
          echo "Application URL: ${{ steps.terraform-output.outputs.application_url }}"

      - name: Production deployment verification
        run: |
          # Wait for services to be ready
          sleep 120
          
          # Verify application is responding
          curl -f "${{ steps.terraform-output.outputs.application_url }}/health" || exit 1
          
          echo "✅ Production infrastructure deployed successfully"
          echo "🌐 Application URL: ${{ steps.terraform-output.outputs.application_url }}"

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v4
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Create terraform.tfvars for destroy
        run: |
          cd infrastructure/terraform
          # Use minimal configuration for destroy
          cat > terraform.tfvars << EOF
          aws_region = "us-west-2"
          environment = "${{ github.event.inputs.environment }}"
          project_name = "contractorlens$([ "${{ github.event.inputs.environment }}" = "staging" ] && echo "-staging" || echo "")"
          db_password = "dummy_for_destroy"
          ecr_repository_url = "dummy.dkr.ecr.us-west-2.amazonaws.com/dummy"
          firebase_project_id = "dummy"
          firebase_private_key = "dummy"
          firebase_client_email = "dummy@dummy.com"
          gemini_api_key = "dummy"
          EOF

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Destroy
        run: |
          cd infrastructure/terraform
          terraform destroy -auto-approve

      - name: Confirm destruction
        run: |
          echo "⚠️  Infrastructure destroyed for environment: ${{ github.event.inputs.environment }}"